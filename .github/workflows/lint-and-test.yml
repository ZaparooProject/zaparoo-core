name: Lint and Test

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*"

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    timeout-minutes: 10
    strategy:
      fail-fast: false # Continue testing on other OS even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true

      - name: Cache APT packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libnfc-dev libgtk-3-dev libx11-dev libpcsclite-dev
          version: 1.0

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write # Required for SARIF upload

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true

      - name: Run GoSec Security Scanner
        uses: securego/gosec@v2.20.0
        with:
          args: '-fmt sarif -out results.sarif ./...'

      - name: Upload GoSec SARIF file
        if: always() # Upload even if GoSec found issues
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: gosec

      - name: Run govulncheck
        run: go run golang.org/x/vuln/cmd/govulncheck@latest ./...

  quick-test:
    name: Quick Test (Unit Tests)
    needs: lint # Only run tests if lint passes
    timeout-minutes: 10
    strategy:
      fail-fast: false # Continue testing on other OS even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true

      - name: Cache APT packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libnfc-dev libgtk-3-dev libx11-dev libpcsclite-dev
          version: 1.0

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install libusb pkg-config

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install pkgconfiglite

      - name: Get dependencies
        run: go mod download

      - name: Run unit tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: go test -v -short -race ./...

      - name: Run unit tests (Unix)
        if: matrix.os != 'windows-latest'
        run: go test -v -short -race ./...

  full-test:
    name: Full Test (Unit + Integration)
    needs: lint # Only run tests if lint passes
    timeout-minutes: 20
    # Only run on Linux for PRs, all platforms for main/tags
    strategy:
      fail-fast: false
      matrix:
        os: ${{ github.event_name == 'pull_request' && fromJSON('["ubuntu-latest"]') || fromJSON('["ubuntu-latest", "macos-latest", "windows-latest"]') }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          cache: true

      - name: Cache APT packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.6.0
        with:
          packages: libnfc-dev libgtk-3-dev libx11-dev libpcsclite-dev
          version: 1.0

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install libusb pkg-config

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install pkgconfiglite

      - name: Get dependencies
        run: go mod download

      - name: Run full tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run full tests (Unix)
        if: matrix.os != 'windows-latest'
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' # Only upload coverage once
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
