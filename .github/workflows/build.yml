name: Build all releases
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnfc-dev libgtk-3-dev libx11-dev libpcsclite-dev
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: --timeout=5m

  build-docker-image:
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push zigcc image
        uses: docker/build-push-action@v6
        with:
          context: ./scripts/zigcc
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/zaparoo-zigcc:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/zaparoo-zigcc:latest
          build-args: |
            UID=1000
            GID=1000
          cache-from: type=gha,scope=zigcc-build
          cache-to: type=gha,mode=max,scope=zigcc-build

  create-release:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${tag}" \
              --draft \
              --generate-notes

  build:
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-image]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows
          - mac
          - batocera
          - linux
          - libreelec
        arch:
          - amd64
          - arm64
        include:
          - platform: steamos
            arch: amd64
          - platform: mister
            arch: arm
          - platform: mistex
            arch: arm64
          - platform: batocera
            arch: arm
          - platform: windows
            arch: 386
          - platform: libreelec
            arch: arm
    steps:
      - uses: actions/checkout@v4
      - id: zaparooapprel
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: ZaparooProject/zaparoo-app
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get latest Zaparoo App web build
        run: |
          APP_TAG=${{ steps.zaparooapprel.outputs.release }}
          APP_VERSION=${APP_TAG#v}
          APP_FILENAME=zaparoo_app-web-${APP_VERSION}.tar.gz
          wget https://github.com/ZaparooProject/zaparoo-app/releases/download/${APP_TAG}/${APP_FILENAME} -O pkg/assets/_app/${APP_FILENAME}
          mkdir pkg/assets/_app/dist
          tar xf pkg/assets/_app/${APP_FILENAME} -C pkg/assets/_app/dist/
      - name: Write release version
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Cache Go packages and build output
        uses: actions/cache@v4
        env:
          cache-name: cache-go
        with:
          path: |
            ~/.cache/go-build
            ~/go
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{hashFiles('go.sum')}}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker CLI
        uses: docker/setup-buildx-action@v3
        with:
          use: true
          install: true
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull zigcc image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/zaparoo-zigcc:${{ github.sha }}
          docker tag ghcr.io/${{ github.repository_owner }}/zaparoo-zigcc:${{ github.sha }} zaparoo/zigcc
      - name: Build
        run: APP_VERSION=${VERSION} task ${{matrix.platform}}:build-${{matrix.arch}}
      - name: Add release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release upload "$tag" _build/${{matrix.platform}}_${{matrix.arch}}/zaparoo-${{matrix.platform}}_${{matrix.arch}}-${VERSION}.zip
      - name: Add Windows setup release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        if: matrix.platform == 'windows'
        run: |
          gh release upload "$tag" _build/windows_${{matrix.arch}}/Output/zaparoo-${{matrix.arch}}-${VERSION}-setup.exe
      - name: Add Batocera package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        if: matrix.platform == 'batocera'
        run: |
          # Map build arch to package arch
          case "${{matrix.arch}}" in
            amd64) PKG_ARCH="x86_64" ;;
            arm64) PKG_ARCH="aarch64" ;;
            arm) PKG_ARCH="armv7l" ;;
          esac
          mkdir -p _build/packages/batocera
          BUILD_ARCH=${{matrix.arch}} PKG_ARCH=${PKG_ARCH} VERSION=${VERSION} task batocera:package-arch
          gh release upload "$tag" _build/packages/batocera/zaparoo-batocera-${VERSION}-${PKG_ARCH}.pkg.tar.zst

  publish-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release edit "$tag" --repo="$GITHUB_REPOSITORY" --draft=false

#  build_mac_app:
#    runs-on: macos-12
#    name: Package and release Mac app
#    needs:
#      - build
#    steps:
#      - uses: actions/checkout@master
#      - name: Download core arm64
#        uses: actions/download-artifact@v3
#        with:
#          name: core-arm64
#          path: FranzCocoa/resources/
#      - name: Download core x86_64
#        uses: actions/download-artifact@v3
#        with:
#          name: core-x86_64
#          path: FranzCocoa/resources/
#      - name: Install Certificates
#        run: |
#          # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
#          MAC_DEV_CER_PATH=$RUNNER_TEMP/madev.p12
#          DEVELOPER_ID_CER_PATH=$RUNNER_TEMP/devid.p12
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          echo -n "$MAC_DEV_CER" | base64 --decode -o $MAC_DEV_CER_PATH
#          echo -n "$DEVELOPER_ID_CER" | base64 --decode -o $DEVELOPER_ID_CER_PATH
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security import $MAC_DEV_CER_PATH -P "$MAC_DEV_CER_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security import $DEVELOPER_ID_CER_PATH -P "$DEVELOPER_ID_CER_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#        env:
#          DEVELOPER_ID_CER: ${{ secrets.DEVELOPER_ID_CER }}
#          DEVELOPER_ID_CER_PASSWORD: ${{ secrets.DEVELOPER_ID_CER_PASSWORD }}
#          MAC_DEV_CER: ${{ secrets.MAC_DEV_CER }}
#          MAC_DEV_CER_PASSWORD: ${{ secrets.MAC_DEV_CER_PASSWORD }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#      - name: Build Franz.app
#        run: |
#          mkdir -p dist
#          npx create-dmg dist/Franz.app dist/
#          mv dist/Franz*.dmg dist/Franz.dmg
#      - name: Notarize Franz.dmg
#        run: |
#          xcrun notarytool submit \
#            --team-id 'H3YE679B58' \
#            --apple-id 'bogdan@defn.io' \
#            --password "$NOTARY_PASSWORD" \
#            --wait \
#            dist/Franz.dmg
#          xcrun stapler staple dist/Franz.dmg
#        env:
#          NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
#      - name: Upload Franz.dmg
#        uses: actions/upload-artifact@v3
#        with:
#          name: Franz.dmg
#          path: dist/Franz.dmg
